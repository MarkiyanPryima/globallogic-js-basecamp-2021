{"ast":null,"code":"import { wait, createGetId, getTimestamp, throwError } from '../utisl';\nimport data from './db';\nconst getId = createGetId(data.length);\nconst api = {\n  // GET /users\n  async getUsers() {\n    await wait(1000);\n    console.log('GET /users', data);\n    return data;\n  },\n\n  // GET /users/:id\n  async getUser(id) {\n    await wait();\n    const user = data.find(u => u.id === id);\n\n    if (user) {\n      console.log(`GET /users/${user.id}`, user);\n      return user;\n    } else {\n      throwError(id);\n    }\n  },\n\n  // POST /users\n  async createUser(user) {\n    await wait();\n    const newUser = { ...user,\n      id: getId(),\n      timestamp: getTimestamp()\n    };\n    data.push(newUser);\n    console.log('POST /users', newUser);\n    return newUser;\n  },\n\n  // PUT /users\n  async editUser(user) {\n    await wait();\n    const index = data.findIndex(u => u.id === user.id);\n\n    if (~index) {\n      data[index] = { ...user,\n        timestamp: getTimestamp()\n      };\n      console.log('PUT /users', data[index]);\n      return data[index];\n    } else {\n      throwError(user.id);\n    }\n  },\n\n  // DELETE /users\n  async deleteUser(user) {\n    await wait();\n    const index = data.findIndex(u => u.id === user.id);\n\n    if (~index) {\n      console.log('DELETE /users', user);\n      return data.splice(index, 1);\n    } else {\n      throwError(user.id);\n    }\n  },\n\n  // GET /roles\n  async getRoles() {\n    await wait();\n    const ROLES = ['user', 'super-user', 'admin'];\n    console.log('GET /roles', ROLES);\n    return ROLES;\n  }\n\n};\nexport default api;","map":{"version":3,"sources":["/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/04-redux/src/api/userApi/index.js"],"names":["wait","createGetId","getTimestamp","throwError","data","getId","length","api","getUsers","console","log","getUser","id","user","find","u","createUser","newUser","timestamp","push","editUser","index","findIndex","deleteUser","splice","getRoles","ROLES"],"mappings":"AAAA,SAASA,IAAT,EAAeC,WAAf,EAA4BC,YAA5B,EAA0CC,UAA1C,QAA4D,UAA5D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,KAAK,GAAGJ,WAAW,CAACG,IAAI,CAACE,MAAN,CAAzB;AAEA,MAAMC,GAAG,GAAG;AACV;AACA,QAAMC,QAAN,GAAiB;AACf,UAAMR,IAAI,CAAC,IAAD,CAAV;AAEAS,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,IAA1B;AACA,WAAOA,IAAP;AACD,GAPS;;AAQV;AACA,QAAMO,OAAN,CAAcC,EAAd,EAAkB;AAChB,UAAMZ,IAAI,EAAV;AAEA,UAAMa,IAAI,GAAGT,IAAI,CAACU,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAAxB,CAAb;;AAEA,QAAIC,IAAJ,EAAU;AACRJ,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaG,IAAI,CAACD,EAAG,EAAlC,EAAqCC,IAArC;AACA,aAAOA,IAAP;AACD,KAHD,MAGO;AACLV,MAAAA,UAAU,CAACS,EAAD,CAAV;AACD;AACF,GApBS;;AAqBV;AACA,QAAMI,UAAN,CAAiBH,IAAjB,EAAuB;AACrB,UAAMb,IAAI,EAAV;AAEA,UAAMiB,OAAO,GAAG,EACd,GAAGJ,IADW;AAEdD,MAAAA,EAAE,EAAEP,KAAK,EAFK;AAGda,MAAAA,SAAS,EAAEhB,YAAY;AAHT,KAAhB;AAMAE,IAAAA,IAAI,CAACe,IAAL,CAAUF,OAAV;AAEAR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BO,OAA3B;AACA,WAAOA,OAAP;AACD,GAnCS;;AAoCV;AACA,QAAMG,QAAN,CAAeP,IAAf,EAAqB;AACnB,UAAMb,IAAI,EAAV;AAEA,UAAMqB,KAAK,GAAGjB,IAAI,CAACkB,SAAL,CAAeP,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASC,IAAI,CAACD,EAAlC,CAAd;;AAEA,QAAI,CAACS,KAAL,EAAY;AACVjB,MAAAA,IAAI,CAACiB,KAAD,CAAJ,GAAc,EACZ,GAAGR,IADS;AAEZK,QAAAA,SAAS,EAAEhB,YAAY;AAFX,OAAd;AAKAO,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,IAAI,CAACiB,KAAD,CAA9B;AACA,aAAOjB,IAAI,CAACiB,KAAD,CAAX;AACD,KARD,MAQO;AACLlB,MAAAA,UAAU,CAACU,IAAI,CAACD,EAAN,CAAV;AACD;AACF,GArDS;;AAsDV;AACA,QAAMW,UAAN,CAAiBV,IAAjB,EAAuB;AACrB,UAAMb,IAAI,EAAV;AAEA,UAAMqB,KAAK,GAAGjB,IAAI,CAACkB,SAAL,CAAeP,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASC,IAAI,CAACD,EAAlC,CAAd;;AAEA,QAAI,CAACS,KAAL,EAAY;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,IAA7B;AACA,aAAOT,IAAI,CAACoB,MAAL,CAAYH,KAAZ,EAAmB,CAAnB,CAAP;AACD,KAHD,MAGO;AACLlB,MAAAA,UAAU,CAACU,IAAI,CAACD,EAAN,CAAV;AACD;AACF,GAlES;;AAmEV;AACA,QAAMa,QAAN,GAAiB;AACf,UAAMzB,IAAI,EAAV;AACA,UAAM0B,KAAK,GAAG,CAAC,MAAD,EAAS,YAAT,EAAuB,OAAvB,CAAd;AAEAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BgB,KAA1B;AACA,WAAOA,KAAP;AACD;;AA1ES,CAAZ;AA6EA,eAAenB,GAAf","sourcesContent":["import { wait, createGetId, getTimestamp, throwError } from '../utisl';\nimport data from './db';\n\nconst getId = createGetId(data.length);\n\nconst api = {\n  // GET /users\n  async getUsers() {\n    await wait(1000);\n\n    console.log('GET /users', data);\n    return data;\n  },\n  // GET /users/:id\n  async getUser(id) {\n    await wait();\n\n    const user = data.find(u => u.id === id);\n\n    if (user) {\n      console.log(`GET /users/${user.id}`, user);\n      return user;\n    } else {\n      throwError(id);\n    }\n  },\n  // POST /users\n  async createUser(user) {\n    await wait();\n\n    const newUser = {\n      ...user,\n      id: getId(),\n      timestamp: getTimestamp()\n    };\n\n    data.push(newUser);\n\n    console.log('POST /users', newUser);\n    return newUser;\n  },\n  // PUT /users\n  async editUser(user) {\n    await wait();\n\n    const index = data.findIndex(u => u.id === user.id);\n\n    if (~index) {\n      data[index] = {\n        ...user,\n        timestamp: getTimestamp()\n      };\n\n      console.log('PUT /users', data[index]);\n      return data[index];\n    } else {\n      throwError(user.id);\n    }\n  },\n  // DELETE /users\n  async deleteUser(user) {\n    await wait();\n\n    const index = data.findIndex(u => u.id === user.id);\n\n    if (~index) {\n      console.log('DELETE /users', user);\n      return data.splice(index, 1);\n    } else {\n      throwError(user.id);\n    }\n  },\n  // GET /roles\n  async getRoles() {\n    await wait();\n    const ROLES = ['user', 'super-user', 'admin'];\n\n    console.log('GET /roles', ROLES);\n    return ROLES;\n  }\n};\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}