{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport api from \"../api/userApi\";\nconst initialState = {\n  users: [],\n  status: \"idle\",\n  error: null\n};\nexport const getUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const users = await api.getUsers();\n  return users;\n});\nexport const addUser = createAsyncThunk(\"users/addNewUser\", async currentUser => {\n  const user = await api.createUser(currentUser);\n  return user;\n});\nexport const editUser = createAsyncThunk(\"users/updateUser\", async currentUser => {\n  const user = await api.editUser(currentUser);\n  return user;\n});\nexport const deleteUser = createAsyncThunk(\"users/deleteUser\", async currentUser => {\n  const user = await api.deleteUser(currentUser);\n  return user;\n});\nconst usersReducer = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getUsers.pending]: state => {\n      state.status = \"Loading\";\n    },\n    [getUsers.fulfilled]: (state, action) => {\n      state.status = \"Fulfilled\";\n      state.users = state.users.concat(action.payload);\n    },\n    [getUsers.rejected]: (state, action) => {\n      state.status = \"Rejected\";\n      state.error = action.payload;\n    },\n    [addUser.fulfilled]: (state, action) => {\n      state.users.push(action.payload);\n    },\n    [editUser.fulfilled]: (state, action) => {\n      const {\n        id,\n        username,\n        age,\n        role,\n        timestamp\n      } = action.payload;\n      const user = state.users.find(user => user.id === id);\n\n      if (user) {\n        user.username = username;\n        user.age = age;\n        user.role = role;\n        user.timestamp = timestamp;\n      }\n    },\n    [deleteUser.fulfilled]: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      state.users = state.users.filter(user => user.id !== id);\n    }\n  }\n});\nexport default usersReducer.reducer; //\n// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import {\n//     CREATE_USER_SUCCESS, DELETE_USER_SUCCESS,\n//     EDIT_USER_SUCCESS,\n//     FETCH_USER_SUCCESS,\n//     FETCH_USERS_SUCCESS\n// } from '../../../Users/UsersTable/types';\n// import api from '../../../../api/userApi';\n//\n// const initialState = {\n//     list: [],\n//     user:{},\n//     isFetched: false,\n//     loading:'fin'\n// };\n//\n// export const getUsers = createAsyncThunk(FETCH_USERS_SUCCESS, async () => {\n//     try {\n//         const result=await api.getUsers()\n//         return result;\n//     } catch (error) {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n//\n// });\n// export const getUser = createAsyncThunk(FETCH_USER_SUCCESS, async (id) => {\n//     try {\n//         const result=await api.getUser(id);\n//         return result;\n//     } catch (error) {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// });\n// export const createUser = createAsyncThunk(CREATE_USER_SUCCESS, async (user) => {\n//     try {\n//         const result=await api.createUser(user);\n//         return result;\n//     } catch (error) {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// });\n// export const editUser=  createAsyncThunk(EDIT_USER_SUCCESS,async (user)=>{\n//     try{\n//         const result=await api.editUser(user)\n//         return result;\n//     }catch (error)\n//     {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// })\n// export const deleteUser=  createAsyncThunk(DELETE_USER_SUCCESS, async (user)=>{\n//     try{\n//         const result=await api.deleteUser(user);\n//         return result;\n//     }catch (error)\n//     {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// })\n//\n// const userReducer = createSlice({\n//     name: 'users',\n//     initialState,\n//     reducers: {},\n//     extraReducers: {\n//         [getUsers.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [getUsers.fulfilled]:(state,action)=>{\n//             state.list=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [getUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [getUser.fulfilled]:(state,action)=>{\n//             state.user=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [createUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [createUser.fulfilled]:(state,action)=>{\n//             state.list=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [editUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [editUser.fulfilled]:(state,action)=>{\n//             state.user=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [deleteUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [deleteUser.fulfilled]:(state,action)=>{\n//             state.list=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         }\n//\n//     }\n// });\n//\n// export default userReducer;","map":{"version":3,"sources":["/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/04-redux/src/Redux/usersReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","users","status","error","getUsers","addUser","currentUser","user","createUser","editUser","deleteUser","usersReducer","name","reducers","extraReducers","pending","state","fulfilled","action","concat","payload","rejected","push","id","username","age","role","timestamp","find","filter","reducer"],"mappings":"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":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport api from \"../api/userApi\";\n\nconst initialState = {\n    users: [],\n    status: \"idle\",\n    error: null\n};\n\nexport const getUsers = createAsyncThunk(\n    \"users/fetchUsers\",\n    async () => {\n        const users = await api.getUsers();\n        return users;\n    }\n);\n\nexport const addUser = createAsyncThunk(\n    \"users/addNewUser\",\n    async currentUser => {\n        const user = await api.createUser(currentUser);\n        return user;\n    }\n)\n\nexport const editUser = createAsyncThunk(\n    \"users/updateUser\",\n    async currentUser => {\n        const user = await api.editUser(currentUser);\n        return user;\n    }\n);\n\nexport const deleteUser = createAsyncThunk(\n    \"users/deleteUser\",\n    async currentUser => {\n        const user = await api.deleteUser(currentUser);\n        return user;\n    }\n)\n\nconst usersReducer = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [getUsers.pending]: (state) => {\n            state.status = \"Loading\";\n        },\n        [getUsers.fulfilled]: (state, action) => {\n            state.status = \"Fulfilled\"\n            state.users = state.users.concat(action.payload);\n        },\n        [getUsers.rejected]: (state, action) => {\n            state.status = \"Rejected\";\n            state.error = action.payload;\n        },\n        [addUser.fulfilled]: (state, action) => {\n            state.users.push(action.payload);\n        },\n        [editUser.fulfilled]: (state, action) => {\n            const {id, username, age, role, timestamp} = action.payload;\n            const user = state.users.find(user => user.id === id);\n            if (user) {\n                user.username = username;\n                user.age = age;\n                user.role = role;\n                user.timestamp = timestamp;\n            }\n        },\n        [deleteUser.fulfilled]: (state, action) => {\n            const {id} = action.payload;\n            state.users = state.users.filter(user => user.id !== id);\n        }\n    }\n});\n\nexport default usersReducer.reducer;\n//\n// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import {\n//     CREATE_USER_SUCCESS, DELETE_USER_SUCCESS,\n//     EDIT_USER_SUCCESS,\n//     FETCH_USER_SUCCESS,\n//     FETCH_USERS_SUCCESS\n// } from '../../../Users/UsersTable/types';\n// import api from '../../../../api/userApi';\n//\n// const initialState = {\n//     list: [],\n//     user:{},\n//     isFetched: false,\n//     loading:'fin'\n// };\n//\n// export const getUsers = createAsyncThunk(FETCH_USERS_SUCCESS, async () => {\n//     try {\n//         const result=await api.getUsers()\n//         return result;\n//     } catch (error) {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n//\n// });\n// export const getUser = createAsyncThunk(FETCH_USER_SUCCESS, async (id) => {\n//     try {\n//         const result=await api.getUser(id);\n//         return result;\n//     } catch (error) {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// });\n// export const createUser = createAsyncThunk(CREATE_USER_SUCCESS, async (user) => {\n//     try {\n//         const result=await api.createUser(user);\n//         return result;\n//     } catch (error) {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// });\n// export const editUser=  createAsyncThunk(EDIT_USER_SUCCESS,async (user)=>{\n//     try{\n//         const result=await api.editUser(user)\n//         return result;\n//     }catch (error)\n//     {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// })\n// export const deleteUser=  createAsyncThunk(DELETE_USER_SUCCESS, async (user)=>{\n//     try{\n//         const result=await api.deleteUser(user);\n//         return result;\n//     }catch (error)\n//     {\n//         window.alert(`Failed to fetch users: ${error.message}`);\n//     }\n// })\n//\n// const userReducer = createSlice({\n//     name: 'users',\n//     initialState,\n//     reducers: {},\n//     extraReducers: {\n//         [getUsers.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [getUsers.fulfilled]:(state,action)=>{\n//             state.list=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [getUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [getUser.fulfilled]:(state,action)=>{\n//             state.user=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [createUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [createUser.fulfilled]:(state,action)=>{\n//             state.list=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [editUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [editUser.fulfilled]:(state,action)=>{\n//             state.user=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         },\n//         [deleteUser.pending]:(state,action)=>{\n//             state.isFetched=false;\n//             state.loading='pending';\n//         },\n//         [deleteUser.fulfilled]:(state,action)=>{\n//             state.list=action.payload;\n//             state.isFetched=true;\n//             state.loading='fin';\n//         }\n//\n//     }\n// });\n//\n// export default userReducer;"]},"metadata":{},"sourceType":"module"}