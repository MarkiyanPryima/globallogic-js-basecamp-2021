{"ast":null,"code":"import _objectSpread from\"/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/03-react-router-formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/03-react-router-formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/03-react-router-formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{wait,createGetId,getTimestamp,throwError}from'../utisl';import data from'./db';var getId=createGetId(data.length);var cityApi={getCities:function getCities(){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return wait(1000);case 2:console.log('GET /cities',data);return _context.abrupt(\"return\",data);case 4:case\"end\":return _context.stop();}}},_callee);}))();},getCity:function getCity(id){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var city;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return wait();case 2:city=data.find(function(c){return c.id===id;});if(!city){_context2.next=8;break;}console.log(\"GET /cities/\".concat(city.id),city);return _context2.abrupt(\"return\",city);case 8:throwError(id);case 9:case\"end\":return _context2.stop();}}},_callee2);}))();},createCity:function createCity(city){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var newCity;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return wait();case 2:newCity=_objectSpread(_objectSpread({},city),{},{id:getId(),timestamp:getTimestamp()});data.push(newCity);console.log('POST /cities',newCity);return _context3.abrupt(\"return\",newCity);case 6:case\"end\":return _context3.stop();}}},_callee3);}))();},editCity:function editCity(city){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var index;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return wait();case 2:index=data.findIndex(function(c){return c.id===city.id;});if(!~index){_context4.next=9;break;}data[index]=_objectSpread(_objectSpread({},city),{},{timestamp:getTimestamp()});console.log('PUT /cities',data[index]);return _context4.abrupt(\"return\",data[index]);case 9:throwError(city.id);case 10:case\"end\":return _context4.stop();}}},_callee4);}))();},deleteCity:function deleteCity(city){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var index;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return wait();case 2:index=data.findIndex(function(c){return c.id===city.id;});if(!~index){_context5.next=8;break;}console.log('DELETE /cities',city);return _context5.abrupt(\"return\",data.splice(index,1));case 8:throwError(city.id);case 9:case\"end\":return _context5.stop();}}},_callee5);}))();},getStatuses:function getStatuses(){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var STATUSES;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return wait();case 2:STATUSES=['city','capital','village'];console.log('GET /statuses',STATUSES);return _context6.abrupt(\"return\",STATUSES);case 5:case\"end\":return _context6.stop();}}},_callee6);}))();}};export default cityApi;","map":{"version":3,"sources":["/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/03-react-router-formik/src/api/cityApi/index.js"],"names":["wait","createGetId","getTimestamp","throwError","data","getId","length","cityApi","getCities","console","log","getCity","id","city","find","c","createCity","newCity","timestamp","push","editCity","index","findIndex","deleteCity","splice","getStatuses","STATUSES"],"mappings":"smBAAA,OAASA,IAAT,CAAeC,WAAf,CAA4BC,YAA5B,CAA0CC,UAA1C,KAA4D,UAA5D,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,GAAMC,CAAAA,KAAK,CAAGJ,WAAW,CAACG,IAAI,CAACE,MAAN,CAAzB,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACRC,SADQ,qBACI,yNACVR,CAAAA,IAAI,CAAC,IAAD,CADM,QAGhBS,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BN,IAA3B,EAHgB,gCAITA,IAJS,6DAKjB,CANa,CAORO,OAPQ,kBAOAC,EAPA,CAOI,wOACVZ,CAAAA,IAAI,EADM,QAGVa,IAHU,CAGHT,IAAI,CAACU,IAAL,CAAU,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACH,EAAF,GAASA,EAAb,EAAX,CAHG,KAKZC,IALY,0BAMdJ,OAAO,CAACC,GAAR,uBAA2BG,IAAI,CAACD,EAAhC,EAAsCC,IAAtC,EANc,iCAOPA,IAPO,SASdV,UAAU,CAACS,EAAD,CAAV,CATc,6DAWjB,CAlBa,CAmBRI,UAnBQ,qBAmBGH,IAnBH,CAmBS,2OACfb,CAAAA,IAAI,EADW,QAGfiB,OAHe,gCAIhBJ,IAJgB,MAKnBD,EAAE,CAAEP,KAAK,EALU,CAMnBa,SAAS,CAAEhB,YAAY,EANJ,GASrBE,IAAI,CAACe,IAAL,CAAUF,OAAV,EAEAR,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BO,OAA5B,EAXqB,iCAYdA,OAZc,+DAatB,CAhCa,CAiCRG,QAjCQ,mBAiCCP,IAjCD,CAiCO,yOACbb,CAAAA,IAAI,EADS,QAGbqB,KAHa,CAGLjB,IAAI,CAACkB,SAAL,CAAe,SAAAP,CAAC,QAAIA,CAAAA,CAAC,CAACH,EAAF,GAASC,IAAI,CAACD,EAAlB,EAAhB,CAHK,KAKf,CAACS,KALc,0BAMjBjB,IAAI,CAACiB,KAAD,CAAJ,gCACKR,IADL,MAEEK,SAAS,CAAEhB,YAAY,EAFzB,GAKAO,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BN,IAAI,CAACiB,KAAD,CAA/B,EAXiB,iCAYVjB,IAAI,CAACiB,KAAD,CAZM,SAcjBlB,UAAU,CAACU,IAAI,CAACD,EAAN,CAAV,CAdiB,8DAgBpB,CAjDa,CAmDRW,UAnDQ,qBAmDGV,IAnDH,CAmDS,yOACfb,CAAAA,IAAI,EADW,QAGfqB,KAHe,CAGPjB,IAAI,CAACkB,SAAL,CAAe,SAAAP,CAAC,QAAIA,CAAAA,CAAC,CAACH,EAAF,GAASC,IAAI,CAACD,EAAlB,EAAhB,CAHO,KAKjB,CAACS,KALgB,0BAMnBZ,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BG,IAA9B,EANmB,iCAOZT,IAAI,CAACoB,MAAL,CAAYH,KAAZ,CAAmB,CAAnB,CAPY,SASnBlB,UAAU,CAACU,IAAI,CAACD,EAAN,CAAV,CATmB,6DAWtB,CA9Da,CAgERa,WAhEQ,uBAgEM,4OACZzB,CAAAA,IAAI,EADQ,QAEZ0B,QAFY,CAED,CAAC,MAAD,CAAS,SAAT,CAAoB,SAApB,CAFC,CAIlBjB,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BgB,QAA7B,EAJkB,iCAKXA,QALW,+DAMnB,CAtEa,CAAhB,CAyEA,cAAenB,CAAAA,OAAf","sourcesContent":["import { wait, createGetId, getTimestamp, throwError } from '../utisl';\nimport data from './db';\n\nconst getId = createGetId(data.length);\n\nconst cityApi = {\n  async getCities() {\n    await wait(1000);\n\n    console.log('GET /cities', data);\n    return data;\n  },\n  async getCity(id) {\n    await wait();\n\n    const city = data.find(c => c.id === id);\n\n    if (city) {\n      console.log(`GET /cities/${city.id}`, city);\n      return city;\n    } else {\n      throwError(id);\n    }\n  },\n  async createCity(city) {\n    await wait();\n\n    const newCity = {\n      ...city,\n      id: getId(),\n      timestamp: getTimestamp()\n    };\n\n    data.push(newCity);\n\n    console.log('POST /cities', newCity);\n    return newCity;\n  },\n  async editCity(city) {\n    await wait();\n\n    const index = data.findIndex(c => c.id === city.id);\n\n    if (~index) {\n      data[index] = {\n        ...city,\n        timestamp: getTimestamp()\n      };\n\n      console.log('PUT /cities', data[index]);\n      return data[index];\n    } else {\n      throwError(city.id);\n    }\n  },\n\n  async deleteCity(city) {\n    await wait();\n\n    const index = data.findIndex(c => c.id === city.id);\n\n    if (~index) {\n      console.log('DELETE /cities', city);\n      return data.splice(index, 1);\n    } else {\n      throwError(city.id);\n    }\n  },\n\n  async getStatuses() {\n    await wait();\n    const STATUSES = ['city', 'capital', 'village'];\n\n    console.log('GET /statuses', STATUSES);\n    return STATUSES;\n  }\n};\n\nexport default cityApi;\n"]},"metadata":{},"sourceType":"module"}