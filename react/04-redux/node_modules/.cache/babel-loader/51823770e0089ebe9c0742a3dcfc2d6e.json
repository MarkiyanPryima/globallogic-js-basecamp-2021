{"ast":null,"code":"var _jsxFileName = \"/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/04-redux/src/components/TodoList/Todos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodos } from \"../Store/redux/reducerTodo\";\nimport { nanoid } from '@reduxjs/toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    todos: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodo: obj => dispatch(addTodos(obj))\n  };\n};\n\nconst Todos = props => {\n  _s();\n\n  const [todo, setTodo] = useState('');\n\n  function handleTodo(e) {\n    setTodo(e.target.value);\n  }\n\n  const add = () => {\n    if (todo === '') {\n      alert('Task is empty');\n    } else {\n      props.addTodo({\n        id: nanoid(),\n        item: todo,\n        completed: false\n      });\n      setTodo('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addTodos\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your to do here\",\n      className: \"input-todo\",\n      value: todo,\n      onChange: e => handleTodo(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addBtn\",\n      onClick: () => add(),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Todos, \"qzJpvfvACNRxymr9ZGWVjTNus0U=\");\n\n_c = Todos;\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/04-redux/src/components/TodoList/Todos.js"],"names":["React","useState","connect","addTodos","nanoid","mapStateToProps","state","todos","mapDispatchToProps","dispatch","addTodo","obj","Todos","props","todo","setTodo","handleTodo","e","target","value","add","alert","id","item","completed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,4BAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,KAAK,EAAED;AADJ,GAAP;AAGH,CAJD;;AAMA,MAAME,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHC,IAAAA,OAAO,EAAEC,GAAG,IAAIF,QAAQ,CAACN,QAAQ,CAACQ,GAAD,CAAT;AADrB,GAAP;AAGH,CAJD;;AAMA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;;AAEA,WAASe,UAAT,CAAoBC,CAApB,EAAuB;AACnBF,IAAAA,OAAO,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACH;;AAED,QAAMC,GAAG,GAAG,MAAM;AACd,QAAIN,IAAI,KAAK,EAAb,EAAiB;AACbO,MAAAA,KAAK,CAAC,eAAD,CAAL;AACH,KAFD,MAEO;AACHR,MAAAA,KAAK,CAACH,OAAN,CAAc;AACVY,QAAAA,EAAE,EAAElB,MAAM,EADA;AAEVmB,QAAAA,IAAI,EAAET,IAFI;AAGVU,QAAAA,SAAS,EAAE;AAHD,OAAd;AAKAT,MAAAA,OAAO,CAAC,EAAD,CAAP;AACH;AACJ,GAXD;;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,sBAA/B;AAAsD,MAAA,SAAS,EAAC,YAAhE;AACO,MAAA,KAAK,EAAED,IADd;AAEO,MAAA,QAAQ,EAAEG,CAAC,IAAID,UAAU,CAACC,CAAD;AAFhC;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAE,MAAMG,GAAG,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA/BD;;GAAMR,K;;KAAAA,K;AAiCN,eAAeV,OAAO,CAACG,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CI,KAA7C,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport {addTodos} from \"../Store/redux/reducerTodo\";\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst mapStateToProps = state => {\n    return {\n        todos: state\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addTodo: obj => dispatch(addTodos(obj))\n    };\n};\n\nconst Todos = (props) => {\n    const [todo, setTodo] = useState('');\n\n    function handleTodo(e) {\n        setTodo(e.target.value);\n    }\n\n    const add = () => {\n        if (todo === '') {\n            alert('Task is empty');\n        } else {\n            props.addTodo({\n                id: nanoid(),\n                item: todo,\n                completed: false\n            });\n            setTodo('');\n        }\n    };\n\n\n    return (\n        <div className='addTodos'>\n            <input type='text' placeholder='Type your to do here' className='input-todo'\n                   value={todo}\n                   onChange={e => handleTodo(e)}\n            />\n            <button className='addBtn' onClick={() => add()}>Add</button>\n\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);"]},"metadata":{},"sourceType":"module"}