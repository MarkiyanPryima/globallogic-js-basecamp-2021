{"ast":null,"code":"var _jsxFileName = \"/Users/markiyanpryima/Desktop/03-react-router-formik/src/components/Cities/CityForm/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport cityApi from '../../../api/cityApi';\nimport { MODE } from '../../../constants';\nimport { ID } from '../constants';\nimport FormContainer from './FormContainer';\nimport { getInitialValues, getRequestPayload } from './converter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CityForm({\n  cities,\n  setCities\n}) {\n  _s();\n\n  const {\n    mode,\n    id\n  } = useParams();\n  const history = useHistory();\n  const city = cities.find(city => city.id === Number(id));\n  useEffect(() => {\n    if (mode === MODE.VIEW || mode === MODE.EDIT) {\n      if (!city) {\n        cityApi.getCity(Number(id)).then(user => setCities(prevCities => [...prevCities, city])).catch(err => window.alert(err.message));\n      }\n    }\n  }, [id, mode, city, setCities]);\n  const [statuses, setStatuses] = useState([]);\n  useEffect(() => {\n    cityApi.getStatuses().then(setStatuses);\n  }, [setStatuses]);\n\n  const handleSubmit = async values => {\n    try {\n      const payload = getRequestPayload(values);\n\n      switch (mode) {\n        case MODE.CREATE:\n          await cityApi.createCity(payload);\n          break;\n\n        case MODE.EDIT:\n          await cityApi.createCity(payload);\n          break;\n\n        case MODE.CLONE:\n          await cityApi.createCity(payload);\n          break;\n\n        case MODE.DELETE:\n          await cityApi.deleteCity(payload);\n          break;\n\n        default:\n          console.error(`Failed to execute this request for ${mode} mode`);\n      }\n    } catch (err) {\n      window.alert(err.message);\n    }\n\n    history.push('/cities');\n  };\n\n  const initialValues = getInitialValues(city);\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    mode: mode,\n    statuses: statuses\n  }, `${mode}:${initialValues[ID]}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CityForm, \"MF78bB8cOqU9MkjPW0/XZ61INqM=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = CityForm;\nexport default CityForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityForm\");","map":{"version":3,"sources":["/Users/markiyanpryima/Desktop/03-react-router-formik/src/components/Cities/CityForm/index.jsx"],"names":["useEffect","useState","useParams","useHistory","cityApi","MODE","ID","FormContainer","getInitialValues","getRequestPayload","CityForm","cities","setCities","mode","id","history","city","find","Number","VIEW","EDIT","getCity","then","user","prevCities","catch","err","window","alert","message","statuses","setStatuses","getStatuses","handleSubmit","values","payload","CREATE","createCity","CLONE","DELETE","deleteCity","console","error","push","initialValues"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport cityApi from '../../../api/cityApi';\nimport { MODE } from '../../../constants';\nimport { ID } from '../constants';\nimport FormContainer from './FormContainer';\nimport { getInitialValues, getRequestPayload } from './converter';\n\nfunction CityForm({ cities, setCities }) {\n  const { mode, id } = useParams();\n  const history = useHistory();\n\n  const city = cities.find(city => city.id === Number(id));\n\n  useEffect(() => {\n    if (mode === MODE.VIEW || mode === MODE.EDIT) {\n      if (!city) {\n        cityApi\n          .getCity(Number(id))\n          .then(user => setCities(prevCities => [...prevCities, city]))\n          .catch(err => window.alert(err.message));\n      }\n    }\n  }, [id, mode, city, setCities]);\n\n  const [statuses, setStatuses] = useState([]);\n  useEffect(() => {\n    cityApi.getStatuses().then(setStatuses);\n  }, [setStatuses]);\n\n  const handleSubmit = async values => {\n    try {\n      const payload = getRequestPayload(values);\n\n      switch (mode) {\n        case MODE.CREATE:\n          await cityApi.createCity(payload);\n          break;\n        case MODE.EDIT:\n          await cityApi.createCity(payload);\n          break;\n        case MODE.CLONE:\n          await cityApi.createCity(payload);\n          break;\n        case MODE.DELETE:\n          await cityApi.deleteCity(payload);\n          break;\n        default:\n          console.error(`Failed to execute this request for ${mode} mode`);\n      }\n    } catch (err) {\n      window.alert(err.message);\n    }\n\n    history.push('/cities');\n  };\n\n  const initialValues = getInitialValues(city);\n\n  return (\n    <FormContainer\n      key={`${mode}:${initialValues[ID]}`}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      mode={mode}\n      statuses={statuses}\n    />\n  );\n}\n\nexport default CityForm;\n"]},"metadata":{},"sourceType":"module"}