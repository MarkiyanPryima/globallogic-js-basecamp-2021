{"ast":null,"code":"import { wait, createGetId, getTimestamp, throwError } from '../utisl';\nimport data from './db';\nconst getId = createGetId(data.length);\nconst cityApi = {\n  async getCities() {\n    await wait(1000);\n    console.log('GET /cities', data);\n    return data;\n  },\n\n  async getCity(id) {\n    await wait();\n    const city = data.find(c => c.id === id);\n\n    if (city) {\n      console.log(`GET /cities/${city.id}`, city);\n      return city;\n    } else {\n      throwError(id);\n    }\n  },\n\n  async createCity(city) {\n    await wait();\n    const newCity = { ...city,\n      id: getId(),\n      timestamp: getTimestamp()\n    };\n    data.push(newCity);\n    console.log('POST /cities', newCity);\n    return newCity;\n  },\n\n  async editCity(city) {\n    await wait();\n    const index = data.findIndex(c => c.id === city.id);\n\n    if (~index) {\n      data[index] = { ...city,\n        timestamp: getTimestamp()\n      };\n      console.log('PUT /cities', data[index]);\n      return data[index];\n    } else {\n      throwError(city.id);\n    }\n  },\n\n  async deleteCity(city) {\n    await wait();\n    const index = data.findIndex(c => c.id === city.id);\n\n    if (~index) {\n      console.log('DELETE /cities', city);\n      return data.splice(index, 1);\n    } else {\n      throwError(city.id);\n    }\n  },\n\n  async getStatuses() {\n    await wait();\n    const STATUSES = ['city', 'capital', 'village'];\n    console.log('GET /statuses', STATUSES);\n    return STATUSES;\n  }\n\n};\nexport default cityApi;","map":{"version":3,"sources":["/Users/markiyanpryima/Desktop/globallogic-js-basecamp-2021/react/03-react-router-formik/src/api/cityApi/index.js"],"names":["wait","createGetId","getTimestamp","throwError","data","getId","length","cityApi","getCities","console","log","getCity","id","city","find","c","createCity","newCity","timestamp","push","editCity","index","findIndex","deleteCity","splice","getStatuses","STATUSES"],"mappings":"AAAA,SAASA,IAAT,EAAeC,WAAf,EAA4BC,YAA5B,EAA0CC,UAA1C,QAA4D,UAA5D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,KAAK,GAAGJ,WAAW,CAACG,IAAI,CAACE,MAAN,CAAzB;AAEA,MAAMC,OAAO,GAAG;AACd,QAAMC,SAAN,GAAkB;AAChB,UAAMR,IAAI,CAAC,IAAD,CAAV;AAEAS,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BN,IAA3B;AACA,WAAOA,IAAP;AACD,GANa;;AAOd,QAAMO,OAAN,CAAcC,EAAd,EAAkB;AAChB,UAAMZ,IAAI,EAAV;AAEA,UAAMa,IAAI,GAAGT,IAAI,CAACU,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAAxB,CAAb;;AAEA,QAAIC,IAAJ,EAAU;AACRJ,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAcG,IAAI,CAACD,EAAG,EAAnC,EAAsCC,IAAtC;AACA,aAAOA,IAAP;AACD,KAHD,MAGO;AACLV,MAAAA,UAAU,CAACS,EAAD,CAAV;AACD;AACF,GAlBa;;AAmBd,QAAMI,UAAN,CAAiBH,IAAjB,EAAuB;AACrB,UAAMb,IAAI,EAAV;AAEA,UAAMiB,OAAO,GAAG,EACd,GAAGJ,IADW;AAEdD,MAAAA,EAAE,EAAEP,KAAK,EAFK;AAGda,MAAAA,SAAS,EAAEhB,YAAY;AAHT,KAAhB;AAMAE,IAAAA,IAAI,CAACe,IAAL,CAAUF,OAAV;AAEAR,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BO,OAA5B;AACA,WAAOA,OAAP;AACD,GAhCa;;AAiCd,QAAMG,QAAN,CAAeP,IAAf,EAAqB;AACnB,UAAMb,IAAI,EAAV;AAEA,UAAMqB,KAAK,GAAGjB,IAAI,CAACkB,SAAL,CAAeP,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASC,IAAI,CAACD,EAAlC,CAAd;;AAEA,QAAI,CAACS,KAAL,EAAY;AACVjB,MAAAA,IAAI,CAACiB,KAAD,CAAJ,GAAc,EACZ,GAAGR,IADS;AAEZK,QAAAA,SAAS,EAAEhB,YAAY;AAFX,OAAd;AAKAO,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BN,IAAI,CAACiB,KAAD,CAA/B;AACA,aAAOjB,IAAI,CAACiB,KAAD,CAAX;AACD,KARD,MAQO;AACLlB,MAAAA,UAAU,CAACU,IAAI,CAACD,EAAN,CAAV;AACD;AACF,GAjDa;;AAmDd,QAAMW,UAAN,CAAiBV,IAAjB,EAAuB;AACrB,UAAMb,IAAI,EAAV;AAEA,UAAMqB,KAAK,GAAGjB,IAAI,CAACkB,SAAL,CAAeP,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASC,IAAI,CAACD,EAAlC,CAAd;;AAEA,QAAI,CAACS,KAAL,EAAY;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,IAA9B;AACA,aAAOT,IAAI,CAACoB,MAAL,CAAYH,KAAZ,EAAmB,CAAnB,CAAP;AACD,KAHD,MAGO;AACLlB,MAAAA,UAAU,CAACU,IAAI,CAACD,EAAN,CAAV;AACD;AACF,GA9Da;;AAgEd,QAAMa,WAAN,GAAoB;AAClB,UAAMzB,IAAI,EAAV;AACA,UAAM0B,QAAQ,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,CAAjB;AAEAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,QAA7B;AACA,WAAOA,QAAP;AACD;;AAtEa,CAAhB;AAyEA,eAAenB,OAAf","sourcesContent":["import { wait, createGetId, getTimestamp, throwError } from '../utisl';\nimport data from './db';\n\nconst getId = createGetId(data.length);\n\nconst cityApi = {\n  async getCities() {\n    await wait(1000);\n\n    console.log('GET /cities', data);\n    return data;\n  },\n  async getCity(id) {\n    await wait();\n\n    const city = data.find(c => c.id === id);\n\n    if (city) {\n      console.log(`GET /cities/${city.id}`, city);\n      return city;\n    } else {\n      throwError(id);\n    }\n  },\n  async createCity(city) {\n    await wait();\n\n    const newCity = {\n      ...city,\n      id: getId(),\n      timestamp: getTimestamp()\n    };\n\n    data.push(newCity);\n\n    console.log('POST /cities', newCity);\n    return newCity;\n  },\n  async editCity(city) {\n    await wait();\n\n    const index = data.findIndex(c => c.id === city.id);\n\n    if (~index) {\n      data[index] = {\n        ...city,\n        timestamp: getTimestamp()\n      };\n\n      console.log('PUT /cities', data[index]);\n      return data[index];\n    } else {\n      throwError(city.id);\n    }\n  },\n\n  async deleteCity(city) {\n    await wait();\n\n    const index = data.findIndex(c => c.id === city.id);\n\n    if (~index) {\n      console.log('DELETE /cities', city);\n      return data.splice(index, 1);\n    } else {\n      throwError(city.id);\n    }\n  },\n\n  async getStatuses() {\n    await wait();\n    const STATUSES = ['city', 'capital', 'village'];\n\n    console.log('GET /statuses', STATUSES);\n    return STATUSES;\n  }\n};\n\nexport default cityApi;\n"]},"metadata":{},"sourceType":"module"}